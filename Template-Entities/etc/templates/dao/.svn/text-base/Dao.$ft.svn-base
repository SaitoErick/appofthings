<#assign keyType="">
<#if pojo.hasIdentifierProperty()>
  <#foreach property in pojo.getAllPropertiesIterator()>
    <#if property.equals(clazz.identifierProperty)>
      <#assign keyType=pojo.getJavaTypeName(property, true)>
    </#if>
  </#foreach>
</#if>
/*
 * @(#) ${pojo.getDeclarationName()}Dao.java
 * Copyright (c) 2008 Ci&T Software S/A.
 * All Rights Reserved.
 */
${pojo.getPackageDeclaration()}

import java.util.List;

import javax.persistence.EntityManagerFactory;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Repository;

/**
 * DAO da entidade ${pojo.getDeclarationName()}.
 * 
 * @author Generated by Hibernate Tools ${version}
 * @since ${date}
 * @version 09/01/19 1.1 10:07:47
 */
@Repository
public class ${pojo.getDeclarationName()}Dao extends AbstractDAO<Integer, ${pojo.getDeclarationName()}> implements I${pojo.getDeclarationName()}Dao { 
	/**
	 * Construtor padrão.
	 * @param factory
	 */
	@Autowired
    public ${pojo.getDeclarationName()}Dao(@Qualifier("entityManagerFactory")EntityManagerFactory factory) {
    	super(factory, ${pojo.getDeclarationName()}.class);
    }   
   
	/**
	 * Busca todos os registros da entidade ${pojo.getDeclarationName()}.
	 * 
	 * @return Lista da entidade ${pojo.getDeclarationName()}
	 */
	@SuppressWarnings("unchecked")
	public List<${pojo.getDeclarationName()}> findAll() {
		return (List<${pojo.getDeclarationName()}>)getJpaTemplate().findByNamedQuery(${pojo.getDeclarationName()}.FIND_ALL);
	}
}
